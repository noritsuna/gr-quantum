id: quantum_controllers_Initializer
label: Initializer
flags: [ 'python', 'cpp' ]

parameters:
-   id: qubit_id
    label: Qubit ID
    dtype: real
-   id: isFeedbackMode
    label: Feedbacked Init Mode
    dtype: bool
    default: 'False'
    options: ['True', 'False']
    option_labels: ['Yes', 'No']
    hide: part
-   id: GATE_type
    label: Gate Type
    dtype: enum
    options: [Frequency, Array]
    option_attributes:
        mode: [f, a]
-   id: freq
    label: Frequency
    dtype: real
    default: 1000
    hide: ${ ('part' if  str(GATE_type.mode) == 'f' else 'all') }
-   id: I_amp
    label: I Amplitude
    dtype: float
    default: 1.0
    hide: ${ ('part' if  str(GATE_type.mode) == 'f' else 'all') }
-   id: Q_amp
    label: Q Amplitude
    dtype: float
    default: 1.0
    hide: ${ ('part' if  str(GATE_type.mode) == 'f' else 'all') }
-   id: I_bw
    label: I Bandwidth
    dtype: real
    default: 10
    hide: ${ ('part' if  str(GATE_type.mode) == 'f' else 'all') }
-   id: Q_bw
    label: Q Bandwidth
    dtype: real
    default: 10
    hide: ${ ('part' if  str(GATE_type.mode) == 'f' else 'all') }
-   id: proc_time
    label: Processing Time(ns)
    dtype: real
    default: 1000000
    hide: ${ ('part' if  str(GATE_type.mode) == 'f' else 'all') }
-   id: WAVE_FILE_PATH
    label: Wave File Path
    dtype: file_open
    hide: ${ ('part' if  str(GATE_type.mode) == 'a' else 'all') }
-   id: WAVE_type
    label: Wave Type
    dtype: enum
    options: [complex, float]
    option_attributes:
        const_type: [complex, real]
        fcn: [c, f]
    hide: ${ ('part' if  str(GATE_type.mode) == 'a' else 'all') }
-   id: samples_per_second
    label: Sample Rate
    dtype: real
    default: samp_rate

inputs:
-   domain: message
    id: in
    optional: true
    hide: ${ isFeedbackMode }
-   domain: message
    id: feedback
    optional: true
    hide: ${ isFeedbackMode }

outputs:
-   domain: message
    id: out

templates:
    imports: import quantum
    make: quantum.controllers_Initializer(${qubit_id}, ${GATE_type.mode}, ${freq}, ${I_amp}, ${Q_amp}, ${I_bw}, ${Q_bw}, ${proc_time}, ${samples_per_second}, ${WAVE_FILE_PATH}, ${WAVE_type.fcn}, ${isFeedbackMode})

cpp_templates:
    includes: [ '#include <quantum/controllers_Initializer.h>' ]
    declarations: 'quantum::controllers_Initializer::sptr ${id};'
    make: 'this->${id} = quantum::controllers_Initializer::make(${qubit_id}, ${GATE_type.mode}, ${freq}, ${I_amp}, ${Q_amp}, ${I_bw}, ${Q_bw}, ${proc_time}, ${samples_per_second}, ${WAVE_FILE_PATH}, ${WAVE_type.fcn}, ${isFeedbackMode});'
    link: ['gnuradio-quantum']
    translations:
        "'": '"'
        'True': 'true'
        'False': 'false'

documentation: |-
    Please input these parameters into the Coprocessor Block, if you want to use same parameters for all gate.
    The Coprocessor Block DO NOT send microwave by first this block(Initializer Block).

file_format: 1
